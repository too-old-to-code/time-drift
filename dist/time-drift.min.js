(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.timeDrift = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";function _slicedToArray(r,t){return _arrayWithHoles(r)||_iterableToArrayLimit(r,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(r,t){var e=[],n=!0,o=!1,i=void 0;try{for(var a,s=r[Symbol.iterator]();!(n=(a=s.next()).done)&&(e.push(a.value),!t||e.length!==t);n=!0);}catch(r){o=!0,i=r}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return e}function _arrayWithHoles(r){if(Array.isArray(r))return r}function timeDrift(r,t){if(!/^\d\d.\d\d(.\d\d)?$/.test(r))throw new Error("Time format is incorrect. It should be either 'HH:MM:SS' or 'HH:MM', where the colon can be replaced by a non-numerical character");var e=_slicedToArray(r.split(/[.:\- ]/).map(function(r){return Number(r)}),3),n=e[0],o=e[1],i=e[2];if(n>23||n<0)throw new Error("Hours must be between 0 and 23");if(o>59||o<0)throw new Error("Minutes must be between 0 and 59");if(null!=i&&(i>59||i<0))throw new Error("Seconds must be between 0 and 59");if(t&&("string"!=typeof t||t.length>1))throw new Error("Separator must be a single, non-numerical character");function a(r,t){if("number"!=typeof r)throw new Error("First argument of ".concat(t," method must be a number"))}function s(r,t){if("string"!=typeof r)throw new Error("Second argument of ".concat(t," method must be a string representing the unit of time"));var e=r.charAt(0).toLowerCase();if(!["h","m","s"].includes(e))throw new Error("Second argument of ".concat(t," method must be hours, minutes or seconds"));if("s"===e&&null==i)throw new Error("You can't adjust seconds if they weren't included in the original time given");return e}var u={normalize:function(r){return null==i&&r.pop(),r.map(function(r){return(r=String(r)).length<2?"0"+r:r}).join(t||":")},hasCrossedMidnight:!1,add:function(r,t){switch(a(r,"add"),this.hasCrossedMidnight=!1,s(t,"add")){case"h":this.hasCrossedMidnight=Boolean(Math.floor((n+r)/24)),n=(n+r)%24;break;case"m":var e=Math.floor((o+r)/60);o=(o+r)%60,this.add(e,"h");break;case"s":var u=Math.floor((i+r)/60);i=(i+r)%60,this.add(u,"m")}return this},subtract:function(r,t){a(r,"subtract"),this.hasCrossedMidnight=!1;var e=0;switch(s(t,"subtract")){case"h":for(var u=n-r;u<0;)e++,u=24+u;n=u,e&&(this.hasCrossedMidnight=!0);break;case"m":for(var h=o-r;h<0;)e++,h=60+h;o=h,e&&this.subtract(e,"h");break;case"s":for(var c=i-r;c<0;)e++,c=60+c;i=c,e&&this.subtract(e,"m")}return this}};return Object.defineProperty(u,"val",{get:function(){return this.normalize([n,o,i])}}),u.add=u.add.bind(u),u.subtract=u.subtract.bind(u),u}module.exports=timeDrift;

},{}]},{},[1])(1)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
